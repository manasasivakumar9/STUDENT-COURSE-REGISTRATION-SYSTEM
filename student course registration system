import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

class Course {
    String courseCode;
    String title;
    String description;
    int capacity;
    String schedule;

    public Course(String courseCode, String title, String description, int capacity, String schedule) {
        this.courseCode = courseCode;
        this.title = title;
        this.description = description;
        this.capacity = capacity;
        this.schedule = schedule;
    }

    @Override
    public String toString() {
        return "Course Code: " + courseCode + "\nTitle: " + title + "\nDescription: " + description
                + "\nCapacity: " + capacity + "\nSchedule: " + schedule + "\n";
    }
}

class Student {
    int studentID;
    String name;
    List<String> registeredCourses;

    public Student(int studentID, String name) {
        this.studentID = studentID;
        this.name = name;
        this.registeredCourses = new ArrayList<>();
    }

    @Override
    public String toString() {
        return "Student ID: " + studentID + "\nName: " + name + "\nRegistered Courses: " + registeredCourses + "\n";
    }
}

public class CourseRegistrationSystem {
    public static void main(String[] args) {
        List<Course> courses = new ArrayList<>();
        List<Student> students = new ArrayList<>();

        // Add some sample courses
        courses.add(new Course("CSE101", "Introduction to Computer Science", "Fundamentals of programming", 50, "Mon/Wed/Fri 10:00 AM"));
        courses.add(new Course("MAT201", "Calculus I", "Basic calculus concepts", 40, "Tue/Thu 2:00 PM"));
        courses.add(new Course("PHY301", "Physics Mechanics", "Classical mechanics principles", 30, "Mon/Wed 1:00 PM"));

        Scanner scanner = new Scanner(System.in);

        while (true) {
            System.out.println("1. Course Listing");
            System.out.println("2. Student Registration");
            System.out.println("3. Course Removal");
            System.out.println("4. Exit");

            System.out.print("Enter your choice: ");
            int choice = scanner.nextInt();

            switch (choice) {
                case 1:
                    displayCourseListing(courses);
                    break;
                case 2:
                    registerStudent(students, courses, scanner);
                    break;
                case 3:
                    removeCourseFromStudent(students, scanner);
                    break;
                case 4:
                    System.out.println("Exiting Program.");
                    scanner.close();
                    System.exit(0);
                default:
                    System.out.println("Invalid choice. Please enter a valid option.");
            }
        }
    }

    private static void displayCourseListing(List<Course> courses) {
        System.out.println("Available Courses:");
        for (Course course : courses) {
            System.out.println(course);
        }
    }

    private static void registerStudent(List<Student> students, List<Course> courses, Scanner scanner) {
        System.out.print("Enter student ID: ");
        int studentID = scanner.nextInt();

        System.out.print("Enter student name: ");
        scanner.nextLine(); // Consume newline character
        String name = scanner.nextLine();

        Student student = new Student(studentID, name);

        // Display course listing for registration
        displayCourseListing(courses);

        // Register for courses
        while (true) {
            System.out.print("Enter the course code to register (or type 'done' to finish): ");
            String courseCode = scanner.next();

            if (courseCode.equalsIgnoreCase("done")) {
                break;
            }

            boolean courseExists = false;
            for (Course course : courses) {
                if (course.courseCode.equalsIgnoreCase(courseCode)) {
                    courseExists = true;
                    if (course.capacity > 0) {
                        student.registeredCourses.add(courseCode);
                        course.capacity--;
                        System.out.println("Registration successful for course: " + courseCode);
                    } else {
                        System.out.println("Course is full. Cannot register for course: " + courseCode);
                    }
                    break;
                }
            }

            if (!courseExists) {
                System.out.println("Invalid course code. Please enter a valid course code.");
            }
        }

        students.add(student);
    }

    private static void removeCourseFromStudent(List<Student> students, Scanner scanner) {
        System.out.print("Enter student ID for course removal: ");
        int studentID = scanner.nextInt();

        boolean studentExists = false;
        for (Student student : students) {
            if (student.studentID == studentID) {
                studentExists = true;

                System.out.println("Student Details:");
                System.out.println(student);

                System.out.print("Enter the course code to remove: ");
                String courseCode = scanner.next();

                if (student.registeredCourses.contains(courseCode)) {
                    student.registeredCourses.remove(courseCode);
                    System.out.println("Course removal successful for course: " + courseCode);
                } else {
                    System.out.println("Student is not registered for course: " + courseCode);
                }

                break;
            }
        }

        if (!studentExists) {
            System.out.println("Student not found. Please enter a valid student ID.");
        }
    }
}
